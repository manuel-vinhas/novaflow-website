{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/mfpsv/nextjs-starter-kit/nextjs-starter-kit/node_modules/%40clerk/nextjs/dist/esm/app-router/keyless-actions.js"],"sourcesContent":["\"use server\";\n\nimport { cookies, headers } from \"next/headers\";\nimport { redirect, RedirectType } from \"next/navigation\";\nimport { errorThrower } from \"../server/errorThrower\";\nimport { detectClerkMiddleware } from \"../server/headers-utils\";\nimport { getKeylessCookieName, getKeylessCookieValue } from \"../server/keyless\";\nimport { canUseKeyless } from \"../utils/feature-flags\";\nasync function syncKeylessConfigAction(args) {\n  const {\n    claimUrl,\n    publishableKey,\n    secretKey,\n    returnUrl\n  } = args;\n  const cookieStore = await cookies();\n  const request = new Request(\"https://placeholder.com\", {\n    headers: await headers()\n  });\n  const keyless = getKeylessCookieValue(name => {\n    var _a;\n    return (_a = cookieStore.get(name)) == null ? void 0 : _a.value;\n  });\n  const pksMatch = (keyless == null ? void 0 : keyless.publishableKey) === publishableKey;\n  const sksMatch = (keyless == null ? void 0 : keyless.secretKey) === secretKey;\n  if (pksMatch && sksMatch) {\n    return;\n  }\n  cookieStore.set(getKeylessCookieName(), JSON.stringify({\n    claimUrl,\n    publishableKey,\n    secretKey\n  }), {\n    secure: true,\n    httpOnly: true\n  });\n  if (detectClerkMiddleware(request)) {\n    redirect(`/clerk-sync-keyless?returnUrl=${returnUrl}`, RedirectType.replace);\n    return;\n  }\n  return;\n}\nasync function createOrReadKeylessAction() {\n  if (!canUseKeyless) {\n    return null;\n  }\n  const result = await import(\"../server/keyless-node.js\").then(m => m.createOrReadKeyless()).catch(() => null);\n  if (!result) {\n    errorThrower.throwMissingPublishableKeyError();\n    return null;\n  }\n  const {\n    clerkDevelopmentCache,\n    createKeylessModeMessage\n  } = await import(\"../server/keyless-log-cache.js\");\n  clerkDevelopmentCache == null ? void 0 : clerkDevelopmentCache.log({\n    cacheKey: result.publishableKey,\n    msg: createKeylessModeMessage(result)\n  });\n  const {\n    claimUrl,\n    publishableKey,\n    secretKey,\n    apiKeysUrl\n  } = result;\n  void (await cookies()).set(getKeylessCookieName(), JSON.stringify({\n    claimUrl,\n    publishableKey,\n    secretKey\n  }), {\n    secure: false,\n    httpOnly: false\n  });\n  return {\n    claimUrl,\n    publishableKey,\n    apiKeysUrl\n  };\n}\nasync function deleteKeylessAction() {\n  if (!canUseKeyless) {\n    return;\n  }\n  await import(\"../server/keyless-node.js\").then(m => m.removeKeyless()).catch(() => {});\n  return;\n}\nexport { createOrReadKeylessAction, deleteKeylessAction, syncKeylessConfigAction };"],"names":[],"mappings":";;;;;;;IAsFS;IAA2B;IAAqB","ignoreList":[0]}},
    {"offset": {"line": 17, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}